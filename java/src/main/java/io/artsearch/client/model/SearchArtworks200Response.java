/*
 * Art Search API
 * Art Search let's you search and discover over one million pieces of historic art.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mail@artsearch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.artsearch.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.artsearch.client.model.SearchArtworks200ResponseArtworksInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.artsearch.client.JSON;

/**
 * SearchArtworks200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0-SNAPSHOT")
public class SearchArtworks200Response {
  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Integer available;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_ARTWORKS = "artworks";
  @SerializedName(SERIALIZED_NAME_ARTWORKS)
  private List<SearchArtworks200ResponseArtworksInner> artworks = new ArrayList<>();

  public SearchArtworks200Response() {
  }

  public SearchArtworks200Response available(Integer available) {
    this.available = available;
    return this;
  }

  /**
   * Get available
   * @return available
   */
  @javax.annotation.Nullable
  public Integer getAvailable() {
    return available;
  }

  public void setAvailable(Integer available) {
    this.available = available;
  }


  public SearchArtworks200Response number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public SearchArtworks200Response offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public SearchArtworks200Response artworks(List<SearchArtworks200ResponseArtworksInner> artworks) {
    this.artworks = artworks;
    return this;
  }

  public SearchArtworks200Response addArtworksItem(SearchArtworks200ResponseArtworksInner artworksItem) {
    if (this.artworks == null) {
      this.artworks = new ArrayList<>();
    }
    this.artworks.add(artworksItem);
    return this;
  }

  /**
   * Get artworks
   * @return artworks
   */
  @javax.annotation.Nullable
  public List<SearchArtworks200ResponseArtworksInner> getArtworks() {
    return artworks;
  }

  public void setArtworks(List<SearchArtworks200ResponseArtworksInner> artworks) {
    this.artworks = artworks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchArtworks200Response searchArtworks200Response = (SearchArtworks200Response) o;
    return Objects.equals(this.available, searchArtworks200Response.available) &&
        Objects.equals(this.number, searchArtworks200Response.number) &&
        Objects.equals(this.offset, searchArtworks200Response.offset) &&
        Objects.equals(this.artworks, searchArtworks200Response.artworks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(available, number, offset, artworks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchArtworks200Response {\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    artworks: ").append(toIndentedString(artworks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available");
    openapiFields.add("number");
    openapiFields.add("offset");
    openapiFields.add("artworks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchArtworks200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchArtworks200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchArtworks200Response is not found in the empty JSON string", SearchArtworks200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchArtworks200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchArtworks200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artworks") != null && !jsonObj.get("artworks").isJsonNull()) {
        JsonArray jsonArrayartworks = jsonObj.getAsJsonArray("artworks");
        if (jsonArrayartworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artworks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artworks` to be an array in the JSON string but got `%s`", jsonObj.get("artworks").toString()));
          }

          // validate the optional field `artworks` (array)
          for (int i = 0; i < jsonArrayartworks.size(); i++) {
            SearchArtworks200ResponseArtworksInner.validateJsonElement(jsonArrayartworks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchArtworks200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchArtworks200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchArtworks200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchArtworks200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchArtworks200Response>() {
           @Override
           public void write(JsonWriter out, SearchArtworks200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchArtworks200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchArtworks200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchArtworks200Response
   * @throws IOException if the JSON string is invalid with respect to SearchArtworks200Response
   */
  public static SearchArtworks200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchArtworks200Response.class);
  }

  /**
   * Convert an instance of SearchArtworks200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

