{-
   Art Search API

   Art Search let's you search and discover over one million pieces of historic art.

   OpenAPI Version: 3.0.0
   Art Search API API version: 1.0.0
   Contact: mail@artsearch.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ArtSearch.API.Art
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ArtSearch.API.Art where

import ArtSearch.Core
import ArtSearch.MimeTypes
import ArtSearch.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Art

-- *** randomArtwork

-- | @GET \/artworks\/random@
-- 
-- Random Artwork
-- 
-- Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
randomArtwork
  :: ArtSearchRequest RandomArtwork MimeNoContent RetrieveArtworkById200Response MimeJSON
randomArtwork =
  _mkRequest "GET" ["/artworks/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)

data RandomArtwork  
-- | @application/json@
instance Produces RandomArtwork MimeJSON


-- *** retrieveArtworkById

-- | @GET \/artworks\/{id}@
-- 
-- Retrieve Artwork by Id
-- 
-- Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
retrieveArtworkById
  :: Id -- ^ "id" -  The id of the artwork.
  -> ArtSearchRequest RetrieveArtworkById MimeNoContent RetrieveArtworkById200Response MimeJSON
retrieveArtworkById (Id id) =
  _mkRequest "GET" ["/artworks/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)

data RetrieveArtworkById  
-- | @application/json@
instance Produces RetrieveArtworkById MimeJSON


-- *** searchArtworks

-- | @GET \/artworks@
-- 
-- Search Artworks
-- 
-- Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
searchArtworks
  :: ArtSearchRequest SearchArtworks MimeNoContent SearchArtworks200Response MimeJSON
searchArtworks =
  _mkRequest "GET" ["/artworks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)

data SearchArtworks  

-- | /Optional Param/ "query" - The search query.
instance HasOptionalParam SearchArtworks Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "earliest-start-date" - The artwork must have been created after this date.
instance HasOptionalParam SearchArtworks EarliestStartDate where
  applyOptionalParam req (EarliestStartDate xs) =
    req `addQuery` toQuery ("earliest-start-date", Just xs)

-- | /Optional Param/ "latest-start-date" - The artwork must have been created before this date.
instance HasOptionalParam SearchArtworks LatestStartDate where
  applyOptionalParam req (LatestStartDate xs) =
    req `addQuery` toQuery ("latest-start-date", Just xs)

-- | /Optional Param/ "earliest-end-date" - For artworks with a period of creation, the completion date must be after this date.
instance HasOptionalParam SearchArtworks EarliestEndDate where
  applyOptionalParam req (EarliestEndDate xs) =
    req `addQuery` toQuery ("earliest-end-date", Just xs)

-- | /Optional Param/ "latest-end-date" - For artworks with a period of creation, the completion date must be before this date.
instance HasOptionalParam SearchArtworks LatestEndDate where
  applyOptionalParam req (LatestEndDate xs) =
    req `addQuery` toQuery ("latest-end-date", Just xs)

-- | /Optional Param/ "min-ratio" - The minimum aspect ratio (width/height) the artwork image must have.
instance HasOptionalParam SearchArtworks MinRatio where
  applyOptionalParam req (MinRatio xs) =
    req `addQuery` toQuery ("min-ratio", Just xs)

-- | /Optional Param/ "max-ratio" - The maximum aspect ratio (width/height) the artwork image must have.
instance HasOptionalParam SearchArtworks MaxRatio where
  applyOptionalParam req (MaxRatio xs) =
    req `addQuery` toQuery ("max-ratio", Just xs)

-- | /Optional Param/ "type" - The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy.
instance HasOptionalParam SearchArtworks ParamType where
  applyOptionalParam req (ParamType xs) =
    req `addQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "material" - The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood.
instance HasOptionalParam SearchArtworks Material where
  applyOptionalParam req (Material xs) =
    req `addQuery` toQuery ("material", Just xs)

-- | /Optional Param/ "technique" - The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging.
instance HasOptionalParam SearchArtworks Technique where
  applyOptionalParam req (Technique xs) =
    req `addQuery` toQuery ("technique", Just xs)

-- | /Optional Param/ "origin" - The country or region of origin for the artwork
instance HasOptionalParam SearchArtworks Origin where
  applyOptionalParam req (Origin xs) =
    req `addQuery` toQuery ("origin", Just xs)

-- | /Optional Param/ "offset" - The number of artworks to skip in range [0,1000]
instance HasOptionalParam SearchArtworks Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of artworks to return in range [1,10]
instance HasOptionalParam SearchArtworks Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchArtworks MimeJSON

