=begin comment

Art Search API

Art Search let's you search and discover over one million pieces of historic art.

The version of the OpenAPI document: 1.0.0
Contact: mail@artsearch.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ArtApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# random_artwork
#
# Random Artwork
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'random_artwork' } = {
        summary => 'Random Artwork',
        params => $params,
        returns => 'RetrieveArtworkById200Response',
        };
}
# @return RetrieveArtworkById200Response
#
sub random_artwork {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/artworks/random';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RetrieveArtworkById200Response', $response);
    return $_response_object;
}

#
# retrieve_artwork_by_id
#
# Retrieve Artwork by Id
#
# @param int $id The id of the artwork. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the artwork.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'retrieve_artwork_by_id' } = {
        summary => 'Retrieve Artwork by Id',
        params => $params,
        returns => 'RetrieveArtworkById200Response',
        };
}
# @return RetrieveArtworkById200Response
#
sub retrieve_artwork_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling retrieve_artwork_by_id");
    }

    # parse inputs
    my $_resource_path = '/artworks/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RetrieveArtworkById200Response', $response);
    return $_response_object;
}

#
# search_artworks
#
# Search Artworks
#
# @param string $query The search query. (optional)
# @param int $earliest_start_date The artwork must have been created after this date. (optional)
# @param int $latest_start_date The artwork must have been created before this date. (optional)
# @param int $earliest_end_date For artworks with a period of creation, the completion date must be after this date. (optional)
# @param int $latest_end_date For artworks with a period of creation, the completion date must be before this date. (optional)
# @param double $min_ratio The minimum aspect ratio (width/height) the artwork image must have. (optional)
# @param double $max_ratio The maximum aspect ratio (width/height) the artwork image must have. (optional)
# @param string $type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
# @param string $material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
# @param string $technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
# @param string $origin The country or region of origin for the artwork (optional)
# @param int $offset The number of artworks to skip in range [0,1000] (optional)
# @param int $number The number of artworks to return in range [1,10] (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '0',
    },
    'earliest_start_date' => {
        data_type => 'int',
        description => 'The artwork must have been created after this date.',
        required => '0',
    },
    'latest_start_date' => {
        data_type => 'int',
        description => 'The artwork must have been created before this date.',
        required => '0',
    },
    'earliest_end_date' => {
        data_type => 'int',
        description => 'For artworks with a period of creation, the completion date must be after this date.',
        required => '0',
    },
    'latest_end_date' => {
        data_type => 'int',
        description => 'For artworks with a period of creation, the completion date must be before this date.',
        required => '0',
    },
    'min_ratio' => {
        data_type => 'double',
        description => 'The minimum aspect ratio (width/height) the artwork image must have.',
        required => '0',
    },
    'max_ratio' => {
        data_type => 'double',
        description => 'The maximum aspect ratio (width/height) the artwork image must have.',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy.',
        required => '0',
    },
    'material' => {
        data_type => 'string',
        description => 'The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood.',
        required => '0',
    },
    'technique' => {
        data_type => 'string',
        description => 'The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging.',
        required => '0',
    },
    'origin' => {
        data_type => 'string',
        description => 'The country or region of origin for the artwork',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of artworks to skip in range [0,1000]',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of artworks to return in range [1,10]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_artworks' } = {
        summary => 'Search Artworks',
        params => $params,
        returns => 'SearchArtworks200Response',
        };
}
# @return SearchArtworks200Response
#
sub search_artworks {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/artworks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'earliest_start_date'}) {
        $query_params->{'earliest-start-date'} = $self->{api_client}->to_query_value($args{'earliest_start_date'});
    }

    # query params
    if ( exists $args{'latest_start_date'}) {
        $query_params->{'latest-start-date'} = $self->{api_client}->to_query_value($args{'latest_start_date'});
    }

    # query params
    if ( exists $args{'earliest_end_date'}) {
        $query_params->{'earliest-end-date'} = $self->{api_client}->to_query_value($args{'earliest_end_date'});
    }

    # query params
    if ( exists $args{'latest_end_date'}) {
        $query_params->{'latest-end-date'} = $self->{api_client}->to_query_value($args{'latest_end_date'});
    }

    # query params
    if ( exists $args{'min_ratio'}) {
        $query_params->{'min-ratio'} = $self->{api_client}->to_query_value($args{'min_ratio'});
    }

    # query params
    if ( exists $args{'max_ratio'}) {
        $query_params->{'max-ratio'} = $self->{api_client}->to_query_value($args{'max_ratio'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'material'}) {
        $query_params->{'material'} = $self->{api_client}->to_query_value($args{'material'});
    }

    # query params
    if ( exists $args{'technique'}) {
        $query_params->{'technique'} = $self->{api_client}->to_query_value($args{'technique'});
    }

    # query params
    if ( exists $args{'origin'}) {
        $query_params->{'origin'} = $self->{api_client}->to_query_value($args{'origin'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchArtworks200Response', $response);
    return $_response_object;
}

1;
