=begin
#Art Search API

#Art Search let's you search and discover over one million pieces of historic art.

The version of the OpenAPI document: 1.0.0
Contact: mail@artsearch.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ArtApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Random Artwork
    # Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
    # @param [Hash] opts the optional parameters
    # @return [RetrieveArtworkById200Response]
    def random_artwork(opts = {})
      data, _status_code, _headers = random_artwork_with_http_info(opts)
      data
    end

    # Random Artwork
    # Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveArtworkById200Response, Integer, Hash)>] RetrieveArtworkById200Response data, response status code and response headers
    def random_artwork_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtApi.random_artwork ...'
      end
      # resource path
      local_var_path = '/artworks/random'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RetrieveArtworkById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"ArtApi.random_artwork",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtApi#random_artwork\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Artwork by Id
    # Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
    # @param id [Integer] The id of the artwork.
    # @param [Hash] opts the optional parameters
    # @return [RetrieveArtworkById200Response]
    def retrieve_artwork_by_id(id, opts = {})
      data, _status_code, _headers = retrieve_artwork_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve Artwork by Id
    # Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
    # @param id [Integer] The id of the artwork.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveArtworkById200Response, Integer, Hash)>] RetrieveArtworkById200Response data, response status code and response headers
    def retrieve_artwork_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtApi.retrieve_artwork_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ArtApi.retrieve_artwork_by_id"
      end
      if @api_client.config.client_side_validation && id > 99999999
        fail ArgumentError, 'invalid value for "id" when calling ArtApi.retrieve_artwork_by_id, must be smaller than or equal to 99999999.'
      end

      if @api_client.config.client_side_validation && id < 0
        fail ArgumentError, 'invalid value for "id" when calling ArtApi.retrieve_artwork_by_id, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/artworks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RetrieveArtworkById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"ArtApi.retrieve_artwork_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtApi#retrieve_artwork_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Artworks
    # Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The search query.
    # @option opts [Integer] :earliest_start_date The artwork must have been created after this date.
    # @option opts [Integer] :latest_start_date The artwork must have been created before this date.
    # @option opts [Integer] :earliest_end_date For artworks with a period of creation, the completion date must be after this date.
    # @option opts [Integer] :latest_end_date For artworks with a period of creation, the completion date must be before this date.
    # @option opts [Float] :min_ratio The minimum aspect ratio (width/height) the artwork image must have.
    # @option opts [Float] :max_ratio The maximum aspect ratio (width/height) the artwork image must have.
    # @option opts [String] :type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy.
    # @option opts [String] :material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood.
    # @option opts [String] :technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging.
    # @option opts [String] :origin The country or region of origin for the artwork
    # @option opts [Integer] :offset The number of artworks to skip in range [0,1000]
    # @option opts [Integer] :number The number of artworks to return in range [1,10]
    # @return [SearchArtworks200Response]
    def search_artworks(opts = {})
      data, _status_code, _headers = search_artworks_with_http_info(opts)
      data
    end

    # Search Artworks
    # Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The search query.
    # @option opts [Integer] :earliest_start_date The artwork must have been created after this date.
    # @option opts [Integer] :latest_start_date The artwork must have been created before this date.
    # @option opts [Integer] :earliest_end_date For artworks with a period of creation, the completion date must be after this date.
    # @option opts [Integer] :latest_end_date For artworks with a period of creation, the completion date must be before this date.
    # @option opts [Float] :min_ratio The minimum aspect ratio (width/height) the artwork image must have.
    # @option opts [Float] :max_ratio The maximum aspect ratio (width/height) the artwork image must have.
    # @option opts [String] :type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy.
    # @option opts [String] :material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood.
    # @option opts [String] :technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging.
    # @option opts [String] :origin The country or region of origin for the artwork
    # @option opts [Integer] :offset The number of artworks to skip in range [0,1000]
    # @option opts [Integer] :number The number of artworks to return in range [1,10]
    # @return [Array<(SearchArtworks200Response, Integer, Hash)>] SearchArtworks200Response data, response status code and response headers
    def search_artworks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtApi.search_artworks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'query'].nil? && opts[:'query'].to_s.length > 300
        fail ArgumentError, 'invalid value for "opts[:"query"]" when calling ArtApi.search_artworks, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'query'].nil? && opts[:'query'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"query\"]' when calling ArtApi.search_artworks, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'min_ratio'].nil? && opts[:'min_ratio'] > 10
        fail ArgumentError, 'invalid value for "opts[:"min_ratio"]" when calling ArtApi.search_artworks, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_ratio'].nil? && opts[:'min_ratio'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_ratio"]" when calling ArtApi.search_artworks, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_ratio'].nil? && opts[:'max_ratio'] > 10
        fail ArgumentError, 'invalid value for "opts[:"max_ratio"]" when calling ArtApi.search_artworks, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_ratio'].nil? && opts[:'max_ratio'] < 0
        fail ArgumentError, 'invalid value for "opts[:"max_ratio"]" when calling ArtApi.search_artworks, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'type'].nil? && opts[:'type'].to_s.length > 1000
        fail ArgumentError, 'invalid value for "opts[:"type"]" when calling ArtApi.search_artworks, the character length must be smaller than or equal to 1000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'type'].nil? && opts[:'type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"type\"]' when calling ArtApi.search_artworks, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'material'].nil? && opts[:'material'].to_s.length > 1000
        fail ArgumentError, 'invalid value for "opts[:"material"]" when calling ArtApi.search_artworks, the character length must be smaller than or equal to 1000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'material'].nil? && opts[:'material'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"material\"]' when calling ArtApi.search_artworks, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'technique'].nil? && opts[:'technique'].to_s.length > 13
        fail ArgumentError, 'invalid value for "opts[:"technique"]" when calling ArtApi.search_artworks, the character length must be smaller than or equal to 13.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'technique'].nil? && opts[:'technique'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"technique\"]' when calling ArtApi.search_artworks, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'origin'].nil? && opts[:'origin'].to_s.length > 100
        fail ArgumentError, 'invalid value for "opts[:"origin"]" when calling ArtApi.search_artworks, the character length must be smaller than or equal to 100.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'origin'].nil? && opts[:'origin'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"origin\"]' when calling ArtApi.search_artworks, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ArtApi.search_artworks, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ArtApi.search_artworks, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 10
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling ArtApi.search_artworks, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling ArtApi.search_artworks, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/artworks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'earliest-start-date'] = opts[:'earliest_start_date'] if !opts[:'earliest_start_date'].nil?
      query_params[:'latest-start-date'] = opts[:'latest_start_date'] if !opts[:'latest_start_date'].nil?
      query_params[:'earliest-end-date'] = opts[:'earliest_end_date'] if !opts[:'earliest_end_date'].nil?
      query_params[:'latest-end-date'] = opts[:'latest_end_date'] if !opts[:'latest_end_date'].nil?
      query_params[:'min-ratio'] = opts[:'min_ratio'] if !opts[:'min_ratio'].nil?
      query_params[:'max-ratio'] = opts[:'max_ratio'] if !opts[:'max_ratio'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'material'] = opts[:'material'] if !opts[:'material'].nil?
      query_params[:'technique'] = opts[:'technique'] if !opts[:'technique'].nil?
      query_params[:'origin'] = opts[:'origin'] if !opts[:'origin'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchArtworks200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"ArtApi.search_artworks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtApi#search_artworks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
