/*
 * Art Search API
 *
 * Art Search let's you search and discover over one million pieces of historic art.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mail@artsearch.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using artsearch.Client;
using artsearch.Model;

namespace artsearch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Random Artwork
        /// </summary>
        /// <remarks>
        /// Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveArtworkById200Response</returns>
        RetrieveArtworkById200Response RandomArtwork(int operationIndex = 0);

        /// <summary>
        /// Random Artwork
        /// </summary>
        /// <remarks>
        /// Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveArtworkById200Response</returns>
        ApiResponse<RetrieveArtworkById200Response> RandomArtworkWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve Artwork by Id
        /// </summary>
        /// <remarks>
        /// Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the artwork.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveArtworkById200Response</returns>
        RetrieveArtworkById200Response RetrieveArtworkById(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieve Artwork by Id
        /// </summary>
        /// <remarks>
        /// Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the artwork.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveArtworkById200Response</returns>
        ApiResponse<RetrieveArtworkById200Response> RetrieveArtworkByIdWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Search Artworks
        /// </summary>
        /// <remarks>
        /// Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestStartDate">The artwork must have been created after this date. (optional)</param>
        /// <param name="latestStartDate">The artwork must have been created before this date. (optional)</param>
        /// <param name="earliestEndDate">For artworks with a period of creation, the completion date must be after this date. (optional)</param>
        /// <param name="latestEndDate">For artworks with a period of creation, the completion date must be before this date. (optional)</param>
        /// <param name="minRatio">The minimum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="maxRatio">The maximum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="type">The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)</param>
        /// <param name="material">The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)</param>
        /// <param name="technique">The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)</param>
        /// <param name="origin">The country or region of origin for the artwork (optional)</param>
        /// <param name="offset">The number of artworks to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of artworks to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchArtworks200Response</returns>
        SearchArtworks200Response SearchArtworks(string? query = default(string?), int? earliestStartDate = default(int?), int? latestStartDate = default(int?), int? earliestEndDate = default(int?), int? latestEndDate = default(int?), double? minRatio = default(double?), double? maxRatio = default(double?), string? type = default(string?), string? material = default(string?), string? technique = default(string?), string? origin = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Artworks
        /// </summary>
        /// <remarks>
        /// Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestStartDate">The artwork must have been created after this date. (optional)</param>
        /// <param name="latestStartDate">The artwork must have been created before this date. (optional)</param>
        /// <param name="earliestEndDate">For artworks with a period of creation, the completion date must be after this date. (optional)</param>
        /// <param name="latestEndDate">For artworks with a period of creation, the completion date must be before this date. (optional)</param>
        /// <param name="minRatio">The minimum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="maxRatio">The maximum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="type">The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)</param>
        /// <param name="material">The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)</param>
        /// <param name="technique">The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)</param>
        /// <param name="origin">The country or region of origin for the artwork (optional)</param>
        /// <param name="offset">The number of artworks to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of artworks to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchArtworks200Response</returns>
        ApiResponse<SearchArtworks200Response> SearchArtworksWithHttpInfo(string? query = default(string?), int? earliestStartDate = default(int?), int? latestStartDate = default(int?), int? earliestEndDate = default(int?), int? latestEndDate = default(int?), double? minRatio = default(double?), double? maxRatio = default(double?), string? type = default(string?), string? material = default(string?), string? technique = default(string?), string? origin = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Random Artwork
        /// </summary>
        /// <remarks>
        /// Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveArtworkById200Response</returns>
        System.Threading.Tasks.Task<RetrieveArtworkById200Response> RandomArtworkAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Random Artwork
        /// </summary>
        /// <remarks>
        /// Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveArtworkById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveArtworkById200Response>> RandomArtworkWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Artwork by Id
        /// </summary>
        /// <remarks>
        /// Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the artwork.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveArtworkById200Response</returns>
        System.Threading.Tasks.Task<RetrieveArtworkById200Response> RetrieveArtworkByIdAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Artwork by Id
        /// </summary>
        /// <remarks>
        /// Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the artwork.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveArtworkById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveArtworkById200Response>> RetrieveArtworkByIdWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Artworks
        /// </summary>
        /// <remarks>
        /// Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestStartDate">The artwork must have been created after this date. (optional)</param>
        /// <param name="latestStartDate">The artwork must have been created before this date. (optional)</param>
        /// <param name="earliestEndDate">For artworks with a period of creation, the completion date must be after this date. (optional)</param>
        /// <param name="latestEndDate">For artworks with a period of creation, the completion date must be before this date. (optional)</param>
        /// <param name="minRatio">The minimum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="maxRatio">The maximum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="type">The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)</param>
        /// <param name="material">The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)</param>
        /// <param name="technique">The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)</param>
        /// <param name="origin">The country or region of origin for the artwork (optional)</param>
        /// <param name="offset">The number of artworks to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of artworks to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchArtworks200Response</returns>
        System.Threading.Tasks.Task<SearchArtworks200Response> SearchArtworksAsync(string? query = default(string?), int? earliestStartDate = default(int?), int? latestStartDate = default(int?), int? earliestEndDate = default(int?), int? latestEndDate = default(int?), double? minRatio = default(double?), double? maxRatio = default(double?), string? type = default(string?), string? material = default(string?), string? technique = default(string?), string? origin = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Artworks
        /// </summary>
        /// <remarks>
        /// Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
        /// </remarks>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestStartDate">The artwork must have been created after this date. (optional)</param>
        /// <param name="latestStartDate">The artwork must have been created before this date. (optional)</param>
        /// <param name="earliestEndDate">For artworks with a period of creation, the completion date must be after this date. (optional)</param>
        /// <param name="latestEndDate">For artworks with a period of creation, the completion date must be before this date. (optional)</param>
        /// <param name="minRatio">The minimum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="maxRatio">The maximum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="type">The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)</param>
        /// <param name="material">The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)</param>
        /// <param name="technique">The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)</param>
        /// <param name="origin">The country or region of origin for the artwork (optional)</param>
        /// <param name="offset">The number of artworks to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of artworks to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchArtworks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchArtworks200Response>> SearchArtworksWithHttpInfoAsync(string? query = default(string?), int? earliestStartDate = default(int?), int? latestStartDate = default(int?), int? earliestEndDate = default(int?), int? latestEndDate = default(int?), double? minRatio = default(double?), double? maxRatio = default(double?), string? type = default(string?), string? material = default(string?), string? technique = default(string?), string? origin = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtApi : IArtApiSync, IArtApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArtApi : IArtApi
    {
        private artsearch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArtApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArtApi(string basePath)
        {
            this.Configuration = artsearch.Client.Configuration.MergeConfigurations(
                artsearch.Client.GlobalConfiguration.Instance,
                new artsearch.Client.Configuration { BasePath = basePath }
            );
            this.Client = new artsearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new artsearch.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = artsearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArtApi(artsearch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = artsearch.Client.Configuration.MergeConfigurations(
                artsearch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new artsearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new artsearch.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = artsearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ArtApi(artsearch.Client.ISynchronousClient client, artsearch.Client.IAsynchronousClient asyncClient, artsearch.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = artsearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public artsearch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public artsearch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public artsearch.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public artsearch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Random Artwork Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveArtworkById200Response</returns>
        public RetrieveArtworkById200Response RandomArtwork(int operationIndex = 0)
        {
            artsearch.Client.ApiResponse<RetrieveArtworkById200Response> localVarResponse = RandomArtworkWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Artwork Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveArtworkById200Response</returns>
        public artsearch.Client.ApiResponse<RetrieveArtworkById200Response> RandomArtworkWithHttpInfo(int operationIndex = 0)
        {
            artsearch.Client.RequestOptions localVarRequestOptions = new artsearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = artsearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = artsearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ArtApi.RandomArtwork";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RetrieveArtworkById200Response>("/artworks/random", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomArtwork", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Artwork Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveArtworkById200Response</returns>
        public async System.Threading.Tasks.Task<RetrieveArtworkById200Response> RandomArtworkAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            artsearch.Client.ApiResponse<RetrieveArtworkById200Response> localVarResponse = await RandomArtworkWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Artwork Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveArtworkById200Response)</returns>
        public async System.Threading.Tasks.Task<artsearch.Client.ApiResponse<RetrieveArtworkById200Response>> RandomArtworkWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            artsearch.Client.RequestOptions localVarRequestOptions = new artsearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = artsearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = artsearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ArtApi.RandomArtwork";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RetrieveArtworkById200Response>("/artworks/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomArtwork", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Artwork by Id Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the artwork.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveArtworkById200Response</returns>
        public RetrieveArtworkById200Response RetrieveArtworkById(int id, int operationIndex = 0)
        {
            artsearch.Client.ApiResponse<RetrieveArtworkById200Response> localVarResponse = RetrieveArtworkByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Artwork by Id Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the artwork.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveArtworkById200Response</returns>
        public artsearch.Client.ApiResponse<RetrieveArtworkById200Response> RetrieveArtworkByIdWithHttpInfo(int id, int operationIndex = 0)
        {
            artsearch.Client.RequestOptions localVarRequestOptions = new artsearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = artsearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = artsearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", artsearch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArtApi.RetrieveArtworkById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RetrieveArtworkById200Response>("/artworks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveArtworkById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Artwork by Id Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the artwork.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveArtworkById200Response</returns>
        public async System.Threading.Tasks.Task<RetrieveArtworkById200Response> RetrieveArtworkByIdAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            artsearch.Client.ApiResponse<RetrieveArtworkById200Response> localVarResponse = await RetrieveArtworkByIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Artwork by Id Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the artwork.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveArtworkById200Response)</returns>
        public async System.Threading.Tasks.Task<artsearch.Client.ApiResponse<RetrieveArtworkById200Response>> RetrieveArtworkByIdWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            artsearch.Client.RequestOptions localVarRequestOptions = new artsearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = artsearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = artsearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", artsearch.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArtApi.RetrieveArtworkById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RetrieveArtworkById200Response>("/artworks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveArtworkById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Artworks Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestStartDate">The artwork must have been created after this date. (optional)</param>
        /// <param name="latestStartDate">The artwork must have been created before this date. (optional)</param>
        /// <param name="earliestEndDate">For artworks with a period of creation, the completion date must be after this date. (optional)</param>
        /// <param name="latestEndDate">For artworks with a period of creation, the completion date must be before this date. (optional)</param>
        /// <param name="minRatio">The minimum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="maxRatio">The maximum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="type">The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)</param>
        /// <param name="material">The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)</param>
        /// <param name="technique">The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)</param>
        /// <param name="origin">The country or region of origin for the artwork (optional)</param>
        /// <param name="offset">The number of artworks to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of artworks to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchArtworks200Response</returns>
        public SearchArtworks200Response SearchArtworks(string? query = default(string?), int? earliestStartDate = default(int?), int? latestStartDate = default(int?), int? earliestEndDate = default(int?), int? latestEndDate = default(int?), double? minRatio = default(double?), double? maxRatio = default(double?), string? type = default(string?), string? material = default(string?), string? technique = default(string?), string? origin = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            artsearch.Client.ApiResponse<SearchArtworks200Response> localVarResponse = SearchArtworksWithHttpInfo(query, earliestStartDate, latestStartDate, earliestEndDate, latestEndDate, minRatio, maxRatio, type, material, technique, origin, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Artworks Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestStartDate">The artwork must have been created after this date. (optional)</param>
        /// <param name="latestStartDate">The artwork must have been created before this date. (optional)</param>
        /// <param name="earliestEndDate">For artworks with a period of creation, the completion date must be after this date. (optional)</param>
        /// <param name="latestEndDate">For artworks with a period of creation, the completion date must be before this date. (optional)</param>
        /// <param name="minRatio">The minimum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="maxRatio">The maximum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="type">The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)</param>
        /// <param name="material">The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)</param>
        /// <param name="technique">The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)</param>
        /// <param name="origin">The country or region of origin for the artwork (optional)</param>
        /// <param name="offset">The number of artworks to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of artworks to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchArtworks200Response</returns>
        public artsearch.Client.ApiResponse<SearchArtworks200Response> SearchArtworksWithHttpInfo(string? query = default(string?), int? earliestStartDate = default(int?), int? latestStartDate = default(int?), int? earliestEndDate = default(int?), int? latestEndDate = default(int?), double? minRatio = default(double?), double? maxRatio = default(double?), string? type = default(string?), string? material = default(string?), string? technique = default(string?), string? origin = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            artsearch.Client.RequestOptions localVarRequestOptions = new artsearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = artsearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = artsearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (earliestStartDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "earliest-start-date", earliestStartDate));
            }
            if (latestStartDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "latest-start-date", latestStartDate));
            }
            if (earliestEndDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "earliest-end-date", earliestEndDate));
            }
            if (latestEndDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "latest-end-date", latestEndDate));
            }
            if (minRatio != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "min-ratio", minRatio));
            }
            if (maxRatio != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "max-ratio", maxRatio));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (material != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "material", material));
            }
            if (technique != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "technique", technique));
            }
            if (origin != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "origin", origin));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "ArtApi.SearchArtworks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchArtworks200Response>("/artworks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchArtworks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Artworks Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestStartDate">The artwork must have been created after this date. (optional)</param>
        /// <param name="latestStartDate">The artwork must have been created before this date. (optional)</param>
        /// <param name="earliestEndDate">For artworks with a period of creation, the completion date must be after this date. (optional)</param>
        /// <param name="latestEndDate">For artworks with a period of creation, the completion date must be before this date. (optional)</param>
        /// <param name="minRatio">The minimum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="maxRatio">The maximum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="type">The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)</param>
        /// <param name="material">The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)</param>
        /// <param name="technique">The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)</param>
        /// <param name="origin">The country or region of origin for the artwork (optional)</param>
        /// <param name="offset">The number of artworks to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of artworks to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchArtworks200Response</returns>
        public async System.Threading.Tasks.Task<SearchArtworks200Response> SearchArtworksAsync(string? query = default(string?), int? earliestStartDate = default(int?), int? latestStartDate = default(int?), int? earliestEndDate = default(int?), int? latestEndDate = default(int?), double? minRatio = default(double?), double? maxRatio = default(double?), string? type = default(string?), string? material = default(string?), string? technique = default(string?), string? origin = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            artsearch.Client.ApiResponse<SearchArtworks200Response> localVarResponse = await SearchArtworksWithHttpInfoAsync(query, earliestStartDate, latestStartDate, earliestEndDate, latestEndDate, minRatio, maxRatio, type, material, technique, origin, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Artworks Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
        /// </summary>
        /// <exception cref="artsearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="earliestStartDate">The artwork must have been created after this date. (optional)</param>
        /// <param name="latestStartDate">The artwork must have been created before this date. (optional)</param>
        /// <param name="earliestEndDate">For artworks with a period of creation, the completion date must be after this date. (optional)</param>
        /// <param name="latestEndDate">For artworks with a period of creation, the completion date must be before this date. (optional)</param>
        /// <param name="minRatio">The minimum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="maxRatio">The maximum aspect ratio (width/height) the artwork image must have. (optional)</param>
        /// <param name="type">The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)</param>
        /// <param name="material">The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)</param>
        /// <param name="technique">The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)</param>
        /// <param name="origin">The country or region of origin for the artwork (optional)</param>
        /// <param name="offset">The number of artworks to skip in range [0,1000] (optional)</param>
        /// <param name="number">The number of artworks to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchArtworks200Response)</returns>
        public async System.Threading.Tasks.Task<artsearch.Client.ApiResponse<SearchArtworks200Response>> SearchArtworksWithHttpInfoAsync(string? query = default(string?), int? earliestStartDate = default(int?), int? latestStartDate = default(int?), int? earliestEndDate = default(int?), int? latestEndDate = default(int?), double? minRatio = default(double?), double? maxRatio = default(double?), string? type = default(string?), string? material = default(string?), string? technique = default(string?), string? origin = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            artsearch.Client.RequestOptions localVarRequestOptions = new artsearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = artsearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = artsearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (earliestStartDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "earliest-start-date", earliestStartDate));
            }
            if (latestStartDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "latest-start-date", latestStartDate));
            }
            if (earliestEndDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "earliest-end-date", earliestEndDate));
            }
            if (latestEndDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "latest-end-date", latestEndDate));
            }
            if (minRatio != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "min-ratio", minRatio));
            }
            if (maxRatio != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "max-ratio", maxRatio));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (material != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "material", material));
            }
            if (technique != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "technique", technique));
            }
            if (origin != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "origin", origin));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "ArtApi.SearchArtworks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(artsearch.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchArtworks200Response>("/artworks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchArtworks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
