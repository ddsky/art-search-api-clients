/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.artsearch

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.artsearch.client.model.RetrieveArtworkById200Response
import io.artsearch.client.model.SearchArtworks200Response

import com.squareup.moshi.Json

import artsearch.infrastructure.ApiClient
import artsearch.infrastructure.ApiResponse
import artsearch.infrastructure.ClientException
import artsearch.infrastructure.ClientError
import artsearch.infrastructure.ServerException
import artsearch.infrastructure.ServerError
import artsearch.infrastructure.MultiValueMap
import artsearch.infrastructure.PartConfig
import artsearch.infrastructure.RequestConfig
import artsearch.infrastructure.RequestMethod
import artsearch.infrastructure.ResponseType
import artsearch.infrastructure.Success
import artsearch.infrastructure.toMultiValue

class ArtApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.artsearch.io")
        }
    }

    /**
     * Random Artwork
     * Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
     * @return RetrieveArtworkById200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomArtwork() : RetrieveArtworkById200Response {
        val localVarResponse = randomArtworkWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RetrieveArtworkById200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Random Artwork
     * Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
     * @return ApiResponse<RetrieveArtworkById200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomArtworkWithHttpInfo() : ApiResponse<RetrieveArtworkById200Response?> {
        val localVariableConfig = randomArtworkRequestConfig()

        return request<Unit, RetrieveArtworkById200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation randomArtwork
     *
     * @return RequestConfig
     */
    fun randomArtworkRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/artworks/random",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Artwork by Id
     * Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
     * @param id The id of the artwork.
     * @return RetrieveArtworkById200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun retrieveArtworkById(id: kotlin.Int) : RetrieveArtworkById200Response {
        val localVarResponse = retrieveArtworkByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RetrieveArtworkById200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Artwork by Id
     * Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
     * @param id The id of the artwork.
     * @return ApiResponse<RetrieveArtworkById200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveArtworkByIdWithHttpInfo(id: kotlin.Int) : ApiResponse<RetrieveArtworkById200Response?> {
        val localVariableConfig = retrieveArtworkByIdRequestConfig(id = id)

        return request<Unit, RetrieveArtworkById200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation retrieveArtworkById
     *
     * @param id The id of the artwork.
     * @return RequestConfig
     */
    fun retrieveArtworkByIdRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/artworks/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Artworks
     * Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
     * @param query The search query. (optional)
     * @param earliestStartDate The artwork must have been created after this date. (optional)
     * @param latestStartDate The artwork must have been created before this date. (optional)
     * @param earliestEndDate For artworks with a period of creation, the completion date must be after this date. (optional)
     * @param latestEndDate For artworks with a period of creation, the completion date must be before this date. (optional)
     * @param minRatio The minimum aspect ratio (width/height) the artwork image must have. (optional)
     * @param maxRatio The maximum aspect ratio (width/height) the artwork image must have. (optional)
     * @param type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
     * @param material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
     * @param technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
     * @param origin The country or region of origin for the artwork (optional)
     * @param offset The number of artworks to skip in range [0,1000] (optional)
     * @param number The number of artworks to return in range [1,10] (optional)
     * @return SearchArtworks200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchArtworks(query: kotlin.String? = null, earliestStartDate: kotlin.Int? = null, latestStartDate: kotlin.Int? = null, earliestEndDate: kotlin.Int? = null, latestEndDate: kotlin.Int? = null, minRatio: kotlin.Double? = null, maxRatio: kotlin.Double? = null, type: kotlin.String? = null, material: kotlin.String? = null, technique: kotlin.String? = null, origin: kotlin.String? = null, offset: kotlin.Int? = null, number: kotlin.Int? = null) : SearchArtworks200Response {
        val localVarResponse = searchArtworksWithHttpInfo(query = query, earliestStartDate = earliestStartDate, latestStartDate = latestStartDate, earliestEndDate = earliestEndDate, latestEndDate = latestEndDate, minRatio = minRatio, maxRatio = maxRatio, type = type, material = material, technique = technique, origin = origin, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchArtworks200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Artworks
     * Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
     * @param query The search query. (optional)
     * @param earliestStartDate The artwork must have been created after this date. (optional)
     * @param latestStartDate The artwork must have been created before this date. (optional)
     * @param earliestEndDate For artworks with a period of creation, the completion date must be after this date. (optional)
     * @param latestEndDate For artworks with a period of creation, the completion date must be before this date. (optional)
     * @param minRatio The minimum aspect ratio (width/height) the artwork image must have. (optional)
     * @param maxRatio The maximum aspect ratio (width/height) the artwork image must have. (optional)
     * @param type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
     * @param material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
     * @param technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
     * @param origin The country or region of origin for the artwork (optional)
     * @param offset The number of artworks to skip in range [0,1000] (optional)
     * @param number The number of artworks to return in range [1,10] (optional)
     * @return ApiResponse<SearchArtworks200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchArtworksWithHttpInfo(query: kotlin.String?, earliestStartDate: kotlin.Int?, latestStartDate: kotlin.Int?, earliestEndDate: kotlin.Int?, latestEndDate: kotlin.Int?, minRatio: kotlin.Double?, maxRatio: kotlin.Double?, type: kotlin.String?, material: kotlin.String?, technique: kotlin.String?, origin: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<SearchArtworks200Response?> {
        val localVariableConfig = searchArtworksRequestConfig(query = query, earliestStartDate = earliestStartDate, latestStartDate = latestStartDate, earliestEndDate = earliestEndDate, latestEndDate = latestEndDate, minRatio = minRatio, maxRatio = maxRatio, type = type, material = material, technique = technique, origin = origin, offset = offset, number = number)

        return request<Unit, SearchArtworks200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchArtworks
     *
     * @param query The search query. (optional)
     * @param earliestStartDate The artwork must have been created after this date. (optional)
     * @param latestStartDate The artwork must have been created before this date. (optional)
     * @param earliestEndDate For artworks with a period of creation, the completion date must be after this date. (optional)
     * @param latestEndDate For artworks with a period of creation, the completion date must be before this date. (optional)
     * @param minRatio The minimum aspect ratio (width/height) the artwork image must have. (optional)
     * @param maxRatio The maximum aspect ratio (width/height) the artwork image must have. (optional)
     * @param type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
     * @param material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
     * @param technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
     * @param origin The country or region of origin for the artwork (optional)
     * @param offset The number of artworks to skip in range [0,1000] (optional)
     * @param number The number of artworks to return in range [1,10] (optional)
     * @return RequestConfig
     */
    fun searchArtworksRequestConfig(query: kotlin.String?, earliestStartDate: kotlin.Int?, latestStartDate: kotlin.Int?, earliestEndDate: kotlin.Int?, latestEndDate: kotlin.Int?, minRatio: kotlin.Double?, maxRatio: kotlin.Double?, type: kotlin.String?, material: kotlin.String?, technique: kotlin.String?, origin: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (earliestStartDate != null) {
                    put("earliest-start-date", listOf(earliestStartDate.toString()))
                }
                if (latestStartDate != null) {
                    put("latest-start-date", listOf(latestStartDate.toString()))
                }
                if (earliestEndDate != null) {
                    put("earliest-end-date", listOf(earliestEndDate.toString()))
                }
                if (latestEndDate != null) {
                    put("latest-end-date", listOf(latestEndDate.toString()))
                }
                if (minRatio != null) {
                    put("min-ratio", listOf(minRatio.toString()))
                }
                if (maxRatio != null) {
                    put("max-ratio", listOf(maxRatio.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (material != null) {
                    put("material", listOf(material.toString()))
                }
                if (technique != null) {
                    put("technique", listOf(technique.toString()))
                }
                if (origin != null) {
                    put("origin", listOf(origin.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/artworks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
