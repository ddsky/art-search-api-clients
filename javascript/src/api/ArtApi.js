/**
 * Art Search API
 * Art Search let's you search and discover over one million pieces of historic art.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mail@artsearch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RetrieveArtworkById200Response from '../model/RetrieveArtworkById200Response';
import SearchArtworks200Response from '../model/SearchArtworks200Response';

/**
* Art service.
* @module api/ArtApi
* @version 1.0.0
*/
export default class ArtApi {

    /**
    * Constructs a new ArtApi. 
    * @alias module:api/ArtApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the randomArtwork operation.
     * @callback module:api/ArtApi~randomArtworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveArtworkById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Random Artwork
     * Get one random artwork from our vast collection. The API returns comprehensive details including the title, high-quality image URL, creation date range, and a rich description providing historical and artistic context.
     * @param {module:api/ArtApi~randomArtworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveArtworkById200Response}
     */
    randomArtwork(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveArtworkById200Response;
      return this.apiClient.callApi(
        '/artworks/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveArtworkById operation.
     * @callback module:api/ArtApi~retrieveArtworkByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveArtworkById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Artwork by Id
     * Get one artwork by its id. The API returns the title, image URL, start and end date, and a description of the artwork.
     * @param {Number} id The id of the artwork.
     * @param {module:api/ArtApi~retrieveArtworkByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveArtworkById200Response}
     */
    retrieveArtworkById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveArtworkById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveArtworkById200Response;
      return this.apiClient.callApi(
        '/artworks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchArtworks operation.
     * @callback module:api/ArtApi~searchArtworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchArtworks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Artworks
     * Search and filter artworks by query, creation time, material, technique, and origin. The natural language search uses semantic AI to understand the context of your query, so you can search for artworks by their style, subject, or even emotions they evoke. The API returns a list of artworks matching the given criteria.
     * @param {Object} opts Optional parameters
     * @param {String} [query] The search query.
     * @param {Number} [earliestStartDate] The artwork must have been created after this date.
     * @param {Number} [latestStartDate] The artwork must have been created before this date.
     * @param {Number} [earliestEndDate] For artworks with a period of creation, the completion date must be after this date.
     * @param {Number} [latestEndDate] For artworks with a period of creation, the completion date must be before this date.
     * @param {Number} [minRatio] The minimum aspect ratio (width/height) the artwork image must have.
     * @param {Number} [maxRatio] The maximum aspect ratio (width/height) the artwork image must have.
     * @param {String} [type] The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy.
     * @param {String} [material] The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood.
     * @param {String} [technique] The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging.
     * @param {String} [origin] The country or region of origin for the artwork
     * @param {Number} [offset] The number of artworks to skip in range [0,1000]
     * @param {Number} [number] The number of artworks to return in range [1,10]
     * @param {module:api/ArtApi~searchArtworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchArtworks200Response}
     */
    searchArtworks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'earliest-start-date': opts['earliestStartDate'],
        'latest-start-date': opts['latestStartDate'],
        'earliest-end-date': opts['earliestEndDate'],
        'latest-end-date': opts['latestEndDate'],
        'min-ratio': opts['minRatio'],
        'max-ratio': opts['maxRatio'],
        'type': opts['type'],
        'material': opts['material'],
        'technique': opts['technique'],
        'origin': opts['origin'],
        'offset': opts['offset'],
        'number': opts['number']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchArtworks200Response;
      return this.apiClient.callApi(
        '/artworks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
