<?php
/**
 * ArtApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Art Search API
 *
 * Art Search let's you search and discover over one million pieces of historic art.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mail@artsearch.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ArtApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ArtApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'randomArtwork' => [
            'application/json',
        ],
        'retrieveArtworkById' => [
            'application/json',
        ],
        'searchArtworks' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation randomArtwork
     *
     * Random Artwork
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomArtwork'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RetrieveArtworkById200Response
     */
    public function randomArtwork(string $contentType = self::contentTypes['randomArtwork'][0])
    {
        list($response) = $this->randomArtworkWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation randomArtworkWithHttpInfo
     *
     * Random Artwork
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomArtwork'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RetrieveArtworkById200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function randomArtworkWithHttpInfo(string $contentType = self::contentTypes['randomArtwork'][0])
    {
        $request = $this->randomArtworkRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetrieveArtworkById200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RetrieveArtworkById200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetrieveArtworkById200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetrieveArtworkById200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetrieveArtworkById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation randomArtworkAsync
     *
     * Random Artwork
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomArtwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function randomArtworkAsync(string $contentType = self::contentTypes['randomArtwork'][0])
    {
        return $this->randomArtworkAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation randomArtworkAsyncWithHttpInfo
     *
     * Random Artwork
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomArtwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function randomArtworkAsyncWithHttpInfo(string $contentType = self::contentTypes['randomArtwork'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RetrieveArtworkById200Response';
        $request = $this->randomArtworkRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'randomArtwork'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomArtwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function randomArtworkRequest(string $contentType = self::contentTypes['randomArtwork'][0])
    {


        $resourcePath = '/artworks/random';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveArtworkById
     *
     * Retrieve Artwork by Id
     *
     * @param  int $id The id of the artwork. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveArtworkById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RetrieveArtworkById200Response
     */
    public function retrieveArtworkById($id, string $contentType = self::contentTypes['retrieveArtworkById'][0])
    {
        list($response) = $this->retrieveArtworkByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation retrieveArtworkByIdWithHttpInfo
     *
     * Retrieve Artwork by Id
     *
     * @param  int $id The id of the artwork. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveArtworkById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RetrieveArtworkById200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveArtworkByIdWithHttpInfo($id, string $contentType = self::contentTypes['retrieveArtworkById'][0])
    {
        $request = $this->retrieveArtworkByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetrieveArtworkById200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RetrieveArtworkById200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetrieveArtworkById200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetrieveArtworkById200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetrieveArtworkById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveArtworkByIdAsync
     *
     * Retrieve Artwork by Id
     *
     * @param  int $id The id of the artwork. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveArtworkById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveArtworkByIdAsync($id, string $contentType = self::contentTypes['retrieveArtworkById'][0])
    {
        return $this->retrieveArtworkByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveArtworkByIdAsyncWithHttpInfo
     *
     * Retrieve Artwork by Id
     *
     * @param  int $id The id of the artwork. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveArtworkById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveArtworkByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['retrieveArtworkById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RetrieveArtworkById200Response';
        $request = $this->retrieveArtworkByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveArtworkById'
     *
     * @param  int $id The id of the artwork. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveArtworkById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveArtworkByIdRequest($id, string $contentType = self::contentTypes['retrieveArtworkById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling retrieveArtworkById'
            );
        }
        if ($id > 99999999) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ArtApi.retrieveArtworkById, must be smaller than or equal to 99999999.');
        }
        if ($id < 0) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ArtApi.retrieveArtworkById, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/artworks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchArtworks
     *
     * Search Artworks
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_start_date The artwork must have been created after this date. (optional)
     * @param  int $latest_start_date The artwork must have been created before this date. (optional)
     * @param  int $earliest_end_date For artworks with a period of creation, the completion date must be after this date. (optional)
     * @param  int $latest_end_date For artworks with a period of creation, the completion date must be before this date. (optional)
     * @param  float $min_ratio The minimum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  float $max_ratio The maximum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  string $type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
     * @param  string $material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
     * @param  string $technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
     * @param  string $origin The country or region of origin for the artwork (optional)
     * @param  int $offset The number of artworks to skip in range [0,1000] (optional)
     * @param  int $number The number of artworks to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchArtworks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchArtworks200Response
     */
    public function searchArtworks($query = null, $earliest_start_date = null, $latest_start_date = null, $earliest_end_date = null, $latest_end_date = null, $min_ratio = null, $max_ratio = null, $type = null, $material = null, $technique = null, $origin = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchArtworks'][0])
    {
        list($response) = $this->searchArtworksWithHttpInfo($query, $earliest_start_date, $latest_start_date, $earliest_end_date, $latest_end_date, $min_ratio, $max_ratio, $type, $material, $technique, $origin, $offset, $number, $contentType);
        return $response;
    }

    /**
     * Operation searchArtworksWithHttpInfo
     *
     * Search Artworks
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_start_date The artwork must have been created after this date. (optional)
     * @param  int $latest_start_date The artwork must have been created before this date. (optional)
     * @param  int $earliest_end_date For artworks with a period of creation, the completion date must be after this date. (optional)
     * @param  int $latest_end_date For artworks with a period of creation, the completion date must be before this date. (optional)
     * @param  float $min_ratio The minimum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  float $max_ratio The maximum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  string $type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
     * @param  string $material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
     * @param  string $technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
     * @param  string $origin The country or region of origin for the artwork (optional)
     * @param  int $offset The number of artworks to skip in range [0,1000] (optional)
     * @param  int $number The number of artworks to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchArtworks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchArtworks200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchArtworksWithHttpInfo($query = null, $earliest_start_date = null, $latest_start_date = null, $earliest_end_date = null, $latest_end_date = null, $min_ratio = null, $max_ratio = null, $type = null, $material = null, $technique = null, $origin = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchArtworks'][0])
    {
        $request = $this->searchArtworksRequest($query, $earliest_start_date, $latest_start_date, $earliest_end_date, $latest_end_date, $min_ratio, $max_ratio, $type, $material, $technique, $origin, $offset, $number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchArtworks200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchArtworks200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchArtworks200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchArtworks200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchArtworks200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchArtworksAsync
     *
     * Search Artworks
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_start_date The artwork must have been created after this date. (optional)
     * @param  int $latest_start_date The artwork must have been created before this date. (optional)
     * @param  int $earliest_end_date For artworks with a period of creation, the completion date must be after this date. (optional)
     * @param  int $latest_end_date For artworks with a period of creation, the completion date must be before this date. (optional)
     * @param  float $min_ratio The minimum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  float $max_ratio The maximum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  string $type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
     * @param  string $material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
     * @param  string $technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
     * @param  string $origin The country or region of origin for the artwork (optional)
     * @param  int $offset The number of artworks to skip in range [0,1000] (optional)
     * @param  int $number The number of artworks to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchArtworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchArtworksAsync($query = null, $earliest_start_date = null, $latest_start_date = null, $earliest_end_date = null, $latest_end_date = null, $min_ratio = null, $max_ratio = null, $type = null, $material = null, $technique = null, $origin = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchArtworks'][0])
    {
        return $this->searchArtworksAsyncWithHttpInfo($query, $earliest_start_date, $latest_start_date, $earliest_end_date, $latest_end_date, $min_ratio, $max_ratio, $type, $material, $technique, $origin, $offset, $number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchArtworksAsyncWithHttpInfo
     *
     * Search Artworks
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_start_date The artwork must have been created after this date. (optional)
     * @param  int $latest_start_date The artwork must have been created before this date. (optional)
     * @param  int $earliest_end_date For artworks with a period of creation, the completion date must be after this date. (optional)
     * @param  int $latest_end_date For artworks with a period of creation, the completion date must be before this date. (optional)
     * @param  float $min_ratio The minimum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  float $max_ratio The maximum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  string $type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
     * @param  string $material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
     * @param  string $technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
     * @param  string $origin The country or region of origin for the artwork (optional)
     * @param  int $offset The number of artworks to skip in range [0,1000] (optional)
     * @param  int $number The number of artworks to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchArtworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchArtworksAsyncWithHttpInfo($query = null, $earliest_start_date = null, $latest_start_date = null, $earliest_end_date = null, $latest_end_date = null, $min_ratio = null, $max_ratio = null, $type = null, $material = null, $technique = null, $origin = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchArtworks'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchArtworks200Response';
        $request = $this->searchArtworksRequest($query, $earliest_start_date, $latest_start_date, $earliest_end_date, $latest_end_date, $min_ratio, $max_ratio, $type, $material, $technique, $origin, $offset, $number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchArtworks'
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_start_date The artwork must have been created after this date. (optional)
     * @param  int $latest_start_date The artwork must have been created before this date. (optional)
     * @param  int $earliest_end_date For artworks with a period of creation, the completion date must be after this date. (optional)
     * @param  int $latest_end_date For artworks with a period of creation, the completion date must be before this date. (optional)
     * @param  float $min_ratio The minimum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  float $max_ratio The maximum aspect ratio (width/height) the artwork image must have. (optional)
     * @param  string $type The artwork type. Possible values are tapestry, collotype, collage, printmaking, cutting, digital_art, sculpture, metalwork, fragment, token, embroidery, painting, jewellery, print, ornament, photograph, statuette, furniture, needlework, drawing, miniature, tile, stereograph, calligraphy. (optional)
     * @param  string $material The art material used. Possible values are ferrous_lactate, ink, textile, metal, bronze, canvas, stone, reduced_iron, horn, stoneware, in_shell_walnuts, chalk, velvet, silver, charcoal, gold_leaf, candied_walnuts, porcelain, walnut_halves, jade, cotton, paint, ferrous_fumarate, graphite, cobalt, sandstone, plastic, walnut_pieces, clay, walnuts, cupric_sulfate, ivory, ferric_orthophosphate, earthenware, tin, pen, linen, mahogany, electrolytic_iron, silk, crayon, black_walnuts, brush, beech_wood, terracotta, glass, lead, brass, oil_paint, pencil, leather, gold, marble, watercolor, diamond, iron, ferrous_sulfate, walnut_halves_and_pieces, gouache, wool, ceramic, parchment, cork, limestone, copper_gluconate, paper, pastel, copper, cardboard, plant_material, oak, wood. (optional)
     * @param  string $technique The art technique used. Possible values are engraving, grinding, embroidering, etching, vitrification, gilding, lithography, knitting, cyanotype, silkscreen, woodcut, printing, drypoint, photolithography, weaving, sawing, casting, glassblowing, block_printing, photographing, forging. (optional)
     * @param  string $origin The country or region of origin for the artwork (optional)
     * @param  int $offset The number of artworks to skip in range [0,1000] (optional)
     * @param  int $number The number of artworks to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchArtworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchArtworksRequest($query = null, $earliest_start_date = null, $latest_start_date = null, $earliest_end_date = null, $latest_end_date = null, $min_ratio = null, $max_ratio = null, $type = null, $material = null, $technique = null, $origin = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchArtworks'][0])
    {

        if ($query !== null && strlen($query) > 300) {
            throw new \InvalidArgumentException('invalid length for "$query" when calling ArtApi.searchArtworks, must be smaller than or equal to 300.');
        }
        if ($query !== null && !preg_match("/./", $query)) {
            throw new \InvalidArgumentException("invalid value for \"query\" when calling ArtApi.searchArtworks, must conform to the pattern /./.");
        }
        




        if ($min_ratio !== null && $min_ratio > 10) {
            throw new \InvalidArgumentException('invalid value for "$min_ratio" when calling ArtApi.searchArtworks, must be smaller than or equal to 10.');
        }
        if ($min_ratio !== null && $min_ratio < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_ratio" when calling ArtApi.searchArtworks, must be bigger than or equal to 0.');
        }
        
        if ($max_ratio !== null && $max_ratio > 10) {
            throw new \InvalidArgumentException('invalid value for "$max_ratio" when calling ArtApi.searchArtworks, must be smaller than or equal to 10.');
        }
        if ($max_ratio !== null && $max_ratio < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_ratio" when calling ArtApi.searchArtworks, must be bigger than or equal to 0.');
        }
        
        if ($type !== null && strlen($type) > 1000) {
            throw new \InvalidArgumentException('invalid length for "$type" when calling ArtApi.searchArtworks, must be smaller than or equal to 1000.');
        }
        if ($type !== null && !preg_match("/./", $type)) {
            throw new \InvalidArgumentException("invalid value for \"type\" when calling ArtApi.searchArtworks, must conform to the pattern /./.");
        }
        
        if ($material !== null && strlen($material) > 1000) {
            throw new \InvalidArgumentException('invalid length for "$material" when calling ArtApi.searchArtworks, must be smaller than or equal to 1000.');
        }
        if ($material !== null && !preg_match("/./", $material)) {
            throw new \InvalidArgumentException("invalid value for \"material\" when calling ArtApi.searchArtworks, must conform to the pattern /./.");
        }
        
        if ($technique !== null && strlen($technique) > 13) {
            throw new \InvalidArgumentException('invalid length for "$technique" when calling ArtApi.searchArtworks, must be smaller than or equal to 13.');
        }
        if ($technique !== null && !preg_match("/./", $technique)) {
            throw new \InvalidArgumentException("invalid value for \"technique\" when calling ArtApi.searchArtworks, must conform to the pattern /./.");
        }
        
        if ($origin !== null && strlen($origin) > 100) {
            throw new \InvalidArgumentException('invalid length for "$origin" when calling ArtApi.searchArtworks, must be smaller than or equal to 100.');
        }
        if ($origin !== null && !preg_match("/./", $origin)) {
            throw new \InvalidArgumentException("invalid value for \"origin\" when calling ArtApi.searchArtworks, must conform to the pattern /./.");
        }
        
        if ($offset !== null && $offset > 1000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ArtApi.searchArtworks, must be smaller than or equal to 1000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ArtApi.searchArtworks, must be bigger than or equal to 0.');
        }
        
        if ($number !== null && $number > 10) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling ArtApi.searchArtworks, must be smaller than or equal to 10.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling ArtApi.searchArtworks, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/artworks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $earliest_start_date,
            'earliest-start-date', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latest_start_date,
            'latest-start-date', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $earliest_end_date,
            'earliest-end-date', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latest_end_date,
            'latest-end-date', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_ratio,
            'min-ratio', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_ratio,
            'max-ratio', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $material,
            'material', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $technique,
            'technique', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $origin,
            'origin', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
